name: CI/CD - Build, Publish, Deploy

on:
  push:
    branches: ["main"]

env:
  # Image names use the Docker Hub username stored in secrets.DOCKER_USERNAME
  IMAGE_SERVER: ${{ secrets.DOCKER_USERNAME }}/bloger-server
  IMAGE_CLIENT: ${{ secrets.DOCKER_USERNAME }}/bloger-client

jobs:
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend assets
        working-directory: ./client
        run: |
          npm ci
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_SERVER }}:latest
            ${{ env.IMAGE_SERVER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          file: ./client/dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_CLIENT }}:latest
            ${{ env.IMAGE_CLIENT }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to server (SSH)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      IMAGE_SERVER: ${{ env.IMAGE_SERVER }}
      IMAGE_CLIENT: ${{ env.IMAGE_CLIENT }}
      DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            set -e
            cd $DEPLOY_DIR
            # pull latest images
            docker pull $IMAGE_SERVER:latest
            docker pull $IMAGE_CLIENT:latest
            # bring up stack (assumes docker-compose.yml is in DEPLOY_DIR)
            docker compose pull || true
            docker compose up -d --remove-orphans
